name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        default: false
        type: boolean

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run full test suite
      run: |
        npm run lint
        npm run type-check
        npm test
        npm run build
    
    - name: Validate version format
      run: |
        VERSION="${{ github.event.inputs.version }}"
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
          echo "Invalid version format. Expected: 1.2.3 or 1.2.3-beta.1"
          exit 1
        fi
        echo "Version format is valid: $VERSION"

    - name: Get previous version for comparison
      id: previous_version
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -z "$LATEST_TAG" ]; then
          echo "No previous tags found"
          echo "previous_tag=" >> $GITHUB_OUTPUT
          echo "has_previous=false" >> $GITHUB_OUTPUT
        else
          echo "previous_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "has_previous=true" >> $GITHUB_OUTPUT
          echo "Previous version found: $LATEST_TAG"
        fi

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
    - name: Generate changelog and bump version
      run: npm run release -- --release-as ${{ github.event.inputs.version }}

    - name: Commit version and changelog update
      run: |
        git add package.json package-lock.json CHANGELOG.md
        if git diff --cached --quiet; then
          echo "No version or changelog changes to commit."
        else
          VERSION=$(node -p "require('./package.json').version")
          git commit -m "chore(release): v$VERSION [skip ci]"
        fi
        # Check if tag exists before creating it
        VERSION=$(node -p "require('./package.json').version")
        if git rev-parse v$VERSION >/dev/null 2>&1; then
          echo "Tag v$VERSION already exists, skipping tag creation."
        else
          git tag v$VERSION
          git push origin main --tags
        fi
        git push origin main

    - name: Extract changelog for release
      id: changelog
      run: |
        VERSION=$(node -p "require('./package.json').version")
        awk "/^##? \[?$VERSION/,/^##? /{if (!/^##? \[?$VERSION/) print last; print; last=\$0}" CHANGELOG.md | sed '$d' > RELEASE_CHANGELOG.md
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat RELEASE_CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Generate commit comparison
      id: comparison
      run: |
        NEW_VERSION="v${{ github.event.inputs.version }}"
        PREVIOUS_TAG="${{ steps.previous_version.outputs.previous_tag }}"
        HAS_PREVIOUS="${{ steps.previous_version.outputs.has_previous }}"
        
        if [ "$HAS_PREVIOUS" = "true" ]; then
          echo "## 📋 Changes"
          echo ""
          echo "**Full Changelog:** https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${NEW_VERSION}"
          echo ""
          echo "### Commits in this release:"
          
          # Get commit messages between tags
          git log ${PREVIOUS_TAG}..HEAD --oneline --pretty=format:"- %s (%h)" > COMMITS.md
          
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "## 📋 Changes" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "**Full Changelog:** https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### Commits in this release:" >> $GITHUB_OUTPUT
          cat COMMITS.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "## 📋 Changes" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "🎉 This is the first release!" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Release
      uses: actions/github-script@v7
      with:
        script: |
          const tag = 'v${{ github.event.inputs.version }}';
          const isPrerelease = ${{ github.event.inputs.prerelease }};
          const changelog = process.env['CHANGELOG'] || '';
          const commits = process.env['COMMITS'] || '';
          
          // Combine changelog and commit comparison
          const releaseBody = changelog + '\n\n' + commits;
          
          const release = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: tag,
            name: `Release ${tag}`,
            body: releaseBody,
            draft: false,
            prerelease: isPrerelease
          });
          console.log(`Created release: ${release.data.html_url}`);
      env:
        CHANGELOG: ${{ steps.changelog.outputs.changelog }}
        COMMITS: ${{ steps.comparison.outputs.commits }}
    
    - name: Publish to npm
      run: |
        if [[ "${{ github.event.inputs.prerelease }}" == "true" ]]; then
          npm publish --tag beta --access public
          echo "✅ Published as beta release"
        else
          npm publish --access public
          echo "✅ Published as stable release"
        fi
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Verify npm publication
      run: |
        PACKAGE_NAME=$(node -p "require('./package.json').name")
        VERSION=$(node -p "require('./package.json').version")
        echo "📦 Published $PACKAGE_NAME@$VERSION"
        echo "🔗 Package URL: https://www.npmjs.com/package/$PACKAGE_NAME"
    
    - name: Post-release summary
      run: |
        echo "🎉 Release completed successfully!"
        echo "📦 Published v${{ github.event.inputs.version }} to npm"
        echo "🏷️ Created GitHub release with commit comparison"
        echo "📝 Check: https://www.npmjs.com/package/steam-locate"